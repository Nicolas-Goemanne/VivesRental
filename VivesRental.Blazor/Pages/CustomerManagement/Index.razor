@page "/customer-management"
@using VivesRental.Sdk
@using VivesRental.Services.Model.Results
@inject CustomerSdk CustomerSdk
@inject IJSRuntime JSRuntime

<PageTitle>Customer Management</PageTitle>

<h3>Customer Management</h3>

<div class="card mb-4">
    <div class="card-body">
        <a class="btn btn-primary" href="@AppRoutes.Customers.Create">Add New Customer</a>
    </div>
</div>

<div class="card mb-4">
    <div class="card-body">
        <div class="form-group">
            <label for="search">Search</label>
            <input id="search" class="form-control" @bind="searchTerm" @oninput="FilterCustomers" />
        </div>
    </div>
</div>

@if (filteredCustomers == null)
{
    <div class="alert alert-info">Loading...</div>
}
else if (!filteredCustomers.Any())
{
    <div class="alert alert-warning">No customers available.</div>
}
else
{
    <div class="card">
        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var customer in filteredCustomers)
                    {
                        <tr>
                            <td>@customer.FirstName</td>
                            <td>@customer.LastName</td>
                            <td>@customer.Email</td>
                            <td>@customer.PhoneNumber</td>
                            <td>
                                <a class="btn btn-secondary btn-sm" href="@AppRoutes.Customers.EditUrl(customer.Id)">Edit</a>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<CustomerResult>? customers;
    private List<CustomerResult>? filteredCustomers;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerSdk.Find(null);
        filteredCustomers = customers;
    }

    private void FilterCustomers(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString().ToLower();
        filteredCustomers = customers?.Where(c =>
            c.FirstName.ToLower().Contains(searchTerm) ||
            c.LastName.ToLower().Contains(searchTerm)).ToList();
    }

    private async Task DeleteCustomer(Guid customerId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this customer?" });
        if (confirmed)
        {
            var success = await CustomerSdk.Remove(customerId);
            if (success)
            {
                customers = await CustomerSdk.Find(null);
                FilterCustomers(null);
                StateHasChanged();
            }
        }
    }
}


































































































































































































































































